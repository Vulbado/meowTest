/******************************************************************************

Copyright (c) 2015, Tymphany HK Ltd. All rights reserved.

Confidential information of Tymphany HK Ltd.

The Software is provided "AS IS" and "WITH ALL FAULTS," without warranty of any
kind, including without limitation the warranties of merchantability, fitness
for a particular purpose and non-infringement. Tymphany HK LTD. makes no
warranty that the Software is free of defects or is suitable for any particular
purpose.

******************************************************************************/

/** @defgroup productConfig  ProductConfig
*    @brief     The config data for product
*    @author    Wesley Lee
*    @note      ST-Nucleo-F072RB
*    @date      22-Sept-2015
*    @copyright Tymphany Ltd.
*
* @{
*/

#ifndef PRODUCT_CONFIG
#define PRODUCT_CONFIG


 /**************************************************/
/********* Stack overflow check config ************/
/**************************************************/
#define HAS_STACK_OVERFLOW_LOW_LEVEL_CHECK

/**************************************************/
/************ System Features Config  *******************/
/**************************************************/
/**
* @name System Features Config
* The config data for system features
*/
///@{

///Enable the extra timer for delay with high resolution
//#define ENABLE_ACCURATE_DELAY


/* Enable to use project specific ProjBsp_AssertHandler(),
 * should implement on projBsp.c
 */
#define PROJECT_SPEC_ASSERT_HANDLER



/***********************/
/* FS Specific Feature */
/***********************/
/* Shipping software sholud disable
 * Enable special key handling for demo
 */
#ifndef NDEBUG
#define DEBUG_DEMO_FEATURE
#endif

/* Shipping software sholud disable
 * Quick boot: not wait ASE-TK & disable audio driver
 */
//#define DEBUG_QUICK_BOOT_NO_AUDIO

/* When ST-Bootloader jump to PIU/UBL, timer tick is disabled, and cause
 * IO-Expender init wait on I2CDrv_WaitReset() and never finish.
 * Workaround: let I2CDrv_WaitReset() delay but do not dependence with tick timer.
 */
#if defined(_BOOTLOADER_UBL) || defined(_BOOTLOADER_PIU)
#define I2C_ESTIMATE_TIMEOUT
#endif

/* AES-TK gain read/write are not totally complete, on this moment
 * MCU still need to store gain. It should be disabled before shipping
 */
#ifdef DEBUG_DEMO_FEATURE
//#define MCU_STORE_DSP_GAIN
#endif

#define USE_OVERHEAT_PROTECT



/**********************/
/* MainApp */
/**********************/

/**********************/
/* Power */
/**********************/
/// Enable POWER Server
#define TP_POWER_V2
#define HAS_POWER_CONTROL
#define HAS_ADC_FOR_POWER

///define the time when system will be auto off if it's in idle state
#define IDLE_AUTO_POWER_OFF_TIMEOUT_MS 900000  // 15min

/**************************************************/
/************ System clock source config  *********/
/**************************************************/
#define EXTERNAL_HIGH_SPEED_OSC_FREQ        (12000000)

/* Use internal clock, to give CPU frequency 8Hz
 */
//#define INTERNAL_HIGH_SPEED_CLOCK

/* Use external 12MHz clock, to give CPU frequency 48MHz
 */
#define EXTERNAL_HIGH_SPEED_CLOCK

#if defined(EXTERNAL_HIGH_SPEED_CLOCK)
  #define UART_CLK_SOURCE_PCLK
#elif defined(INTERNAL_HIGH_SPEED_CLOCK)
  #define UART_CLK_SOURCE_HSI
#endif

//#define USE_POWER_SNEAKY_SERVER

/**********************/
/* Debug */
/**********************/
#define HAS_PROJ_PRINTF

//#define GAIN_ADJUSTMENT_FOR_DIFF_BATTLEVEL
#define HAS_DEBUG
#define HW_GPIO_DEBUG
#define PT_I2C_DEBUG
#define PT_ADC_DEBUG
#define HAS_IGNORE_UART_ERROR
#define HAS_BLE_CTRL

#define HAS_DIRECT_ADC_ACCESS_BY_PORT_BIT
/// Define if there's battery info in setting server
//#define DEBUG_BATT_INFO

#define BSP_DEBUG_ENABLE

#define HAS_APP_PRIVATE_SIG

/**********************/
/* Setting */
/**********************/
#define HAS_SETTING
#define SETTING_HAS_ROM_DATA
#define HAS_CBUFFER


///NVM is non-volatile-memory, which is the flash inside MCU, need MCU to support this
#define HAS_NVM
//#define HAS_EXT_FLASH

/**********************/
/* Safety */
/**********************/
//#define HAS_IWDG
#define IWDG_FEED_PERIOD_SEC (20)

//#ifndef NDEBUG
/*
  To make sure memory control function properly
  erase chip before burning new MCU image.
  This will reset minimal margin values from flash
  and prepare MCU for new stress testing cycles.
*/
//#define HAS_DYNAMIC_MEMORY_CONTROL
#define HAS_DYNAMIC_MEMORY_CONTROL_WARNING_PERCENTAGE 0  //for debug build, assert when lower than it
//#endif


/**********************/
/* Audio */
/**********************/
/// Enable AUDIO Server
#define HAS_AUDIO_CONTROL
#define AUDIO_MULTI_SOURCE
#define HAS_AMPLIFY_MUTE
#define AUDIO_LIMITER_FOR_LOW_POWER
#define TP_AUDIO_V2
#define HAS_I2C2
#define HAS_AUXIN
#define HAS_ETHERNET
#define HAS_DSP_CALIBRATION_GAIN
#define HAS_LINE_IN_MULTI_ROOM
#define HAS_SPDIF_IN
#define HAS_AUDIO_MUTE_CHANNEL
//#define HAS_LINE_IN_SENSITIVITY_SETTING

/* When detect DSP USBi cable, disable amplifier/DSP I2C access
 */
#ifndef NDEBUG
//  #define HAS_DSP_TUNING_DETECT
#endif


/**********************/
/* Key */
/**********************/
/// Enable KEY Server
#define HAS_KEYS
#define HAS_ADC_KEY
#define HAS_GPIO_KEY
#define HAS_TOUCH_KEY
#define HAS_BMI160_TILT_SENSOR_KEY
#define HAS_INTERRUPT_WAKE_UP_KEY
#define KEY_SRV_HAS_DEBUG
#define HAS_TI_INTEG_TOUCHKEY_DRV
//#define HAS_ROTATER_KEY
#define HAS_PARAM_KEY


/**********************/
/* Led */
/**********************/
/// Enable LED Server
#define HAS_LEDS
#ifdef HAS_LEDS
#define LED_HAS_IOEXPANDER
#define LED_HAS_PWM
#define LED_HAS_RGB
#endif
#define HAS_VOLUME_STRIP
#define HAS_COMB_KEY
#define HAS_NOT_STRICT_NORMAL_COMBO
#define HAS_PROXIMITY_KEY

/**********************/
/* WIFI module */
/**********************/
#define HAS_ASE_NG
#define HAS_ASE_NG_SERVICE_TOOL
#define ASE_TK_DEBUG_SHOW_RX_DATA
#define ASE_TK_OTA
#define HAS_PRODUCTION_TEST_DISABLE_ASE_TK_UART
#define HAS_PRODUCTION_TEST_RECEIVE_ASE_TK_NOTICE
#define HAS_INTERNAL_SPEAKER_COMPENSATION
#define HAS_I2C_MULTIPLE_CTOR
#define HAS_TI_PROXIMITY_SENSOR_PGA460

/**********************/
/* BT module */
/**********************/
#define BLUETOOTH_V2
//#define HAS_BLUETOOTH

///define if the system has BT tone
//#define HAS_BT_TONE

///define if the system support NFC pair feature
//#define BT_NFC_PAIR


/**********************/
/* SPI device */
/**********************/

#define HAS_HW_SPI_DEVICE

#define HAS_UART_DEV_8

#define I2C_STATE_OK              (0)
#define I2C_STATE_RECOVER_PHASE_1 (1)//I2C ERROR CAUSED BY TOUCH/IOEXPANDER
#define I2C_STATE_RECOVER_PHASE_2 (2)
#define I2C_STATE_RECOVER_PHASE_3 (3)
#define I2C_STATE_RECOVER_PHASE_4 (4)
#define I2C_STATE_RECOVER_PHASE_5 (5)//I2C ERROR CAUSED BY DSP
#define I2C_STATE_RECOVER_PHASE_6 (6)//DSP TUNE MODE
#define I2C_STATE_RECOVER_PHASE_7 (7)
#define I2C_STATE_RECOVER_PHASE_8 (8)//Reinit Keys Only

#define SYS_POWER_STATE_INVALID   (0)
#define SYS_POWER_STATE_ACTIVE    (1)
#define SYS_POWER_STATE_CHANGING  (2)
#define SYS_POWER_STATE_BOOTING   (3)
#define SYS_POWER_STATE_OFF       (4)

#define FLOOR_MODE                (0)
#define WALL_MODE                 (1)

#define I2C_STATE_RECOVER_DELAY1  (1000)
#define I2C_STATE_RECOVER_DELAY2  (2000)
#define I2C_STATE_RECOVER_DELAY3  (1000)
#define I2C_STATE_TUNE_DELAY      (1000)

#define TOUCH_A_POWER_ON_PORT      (0)
#define TOUCH_A_POWER_ON_PIN       (2)

#define TOUCH_B_POWER_ON_PORT      (0)
#define TOUCH_B_POWER_ON_PIN       (3)

#define LED_POWER_ON_PORT          (0)
#define LED_POWER_ON_PIN           (5)

#define PROXIMITY_DEBUG_PORT       (0)
#define PROXIMITY_DEBUG_PIN        (3)

#define PROXIMITY_MODULE_ACTIVE    (1)
#define PROXIMITY_MODULE_DEACTIVE  (0)

/**********************/
/* DELEGATE */
/**********************/
/// Enable DELEGATE
#define HAS_DELEGATES
//#define HAS_BT_DELEGATE
//#define HAS_POWER_DELEGATE
#ifdef HAS_DELEGATES
  //#define HAS_IDLE_DELEGATE
  #ifdef HAS_IDLE_DELEGATE
    #define IDLE_TIMEOUT_IN_MS	(20*60*1000) /*idle debouncing: 20 min */
  #endif /* HAS_IDLE_DELEGATE */
#endif /* HAS_DELEGATES */



/**********************/
/* UART  */
/**********************/
/// Enable the feature that UART can wake up MCU from deep sleep, need MCU support
//#define ENABLE_WAKEUP_BY_UART

///define the number of UART system is using
#define NUM_OF_UART     8
#define UART_NON_DIRECT_MAP


/**********************/
/*    BOOT-LOADER     */
/**********************/
#define BL_HAS_I2C


///@}  //endof System Features Config

/**************************************************/
/**********Product Audio Features Config  ****************/
/**************************************************/
/**
* @name Product Audio Features Config
* The config data for Product Audio Features
*/
///@{

/** @brief Max volume, need to reference DSP volume table
*    @see MASTER_VOL
*/
#define MIN_VOLUME           (0)
#define MAX_VOLUME           (90)   // total of 91 vol.
#define VOLUME_STEP          (10)
#define VOLUME_SEND_TO_ASETK (4)    //When exceed this volume change, then send to ASE-TK. This is to reduce event number

/// The max volume when system power is low
#define LOW_POWER_MAX_VOLUME 15

/// The default volume when system is boot up
#define DEFAULT_VOLUME           30
#define ADUIO_MIN_FADE_STEP_TIME 15 // ms
#define ADUIO_MIN_FADE_STEP      1  // volume step

#define HAS_TREBLE
#define HAS_BASS

#define MIN_BASS            (0)
#define MAX_BASS            (20)
#define BASS_DEFAULT        (10)
#define MIN_TREBLE          (0)
#define MAX_TREBLE          (20)
#define TREBLE_DEFAULT      (10)

#define SW_VERSION_LENGTH    (8)
#define HW_VERSION_LENGTH    (10)
#define DSP_VERSION_LENGTH   (10)
#define PCB_SN_LENGTH        (16)

#define LDC2114_CONFIG_LENGTH    (LDC2114_HEADER_LENGTH+LDC2114_DATA_LENGTH)  //add for calibration tool
#define LDC2114_HEADER_LENGTH    (4)
#define LDC2114_DATA_LENGTH      (28)
#define MAGIC_WORD_BYTE_0        (0xA5)
#define MAGIC_WORD_BYTE_1        (0xA7)
#define MAGIC_WORD_BYTE_2        (0xCD)
#define MAGIC_WORD_BYTE_3        (0x1D)

#define PROX_THRESHOLD_SIZE      (16)
#define PROX_OBJ_NUM             (8)

/// BT/AUX In proirity config
//#define BT_AUDIO_HAS_HIGH_PRIO
//#define AUX_IN_HAS_HIGH_PRIO

/** iBT150 need to enable this macro to remember volue in audio server
*    But it need to set default volume for power on tone, so before that,
*    disable the macro now
*/
//#define REMEMBER_VOLUME

//#define REDUCE_DYNAMIC_RANGE_WHILE_LOW_POWER

//#define BT_CODEC_STATUS_CHECK       // GPIO from module indicate the status of the audio existance.

/* DSP Path Definition */
#define AUDIO_CHNANNEL_ASE     AUDIO_CHANNEL_I2S_1
#define AUDIO_CHNANNEL_SPDIF   AUDIO_CHANNEL_SPDIF_0
#define AUDIO_CHNANNEL_AUXIN   AUDIO_CHANNEL_AUXIN

#define AUDIO_CHNANNEL_EXT_SOURCE AUDIO_CHANNEL_I2S_2


///@}  //endof Product Audio Features Config

/**************************************************/
/***************** Debug Control  *********************/
/**************************************************/
/**
* @name Debug Control
* Turn on/off the debug message seperately, easy for debug
*/
///@{
#define BT_DEBUG_ENABLE
#define POWER_DEBUG
#define AUDIOSRV_DEBUG
#define MAINAPP_DEBUG
//#define ASE_TK_DEBUG_ENABLE
#define AMDRV_DEBUG
#define AZOTEQ_INTERGRATE_TOUCH_DRV_DEBUG

#define HAS_LED_STRIP

#define TEST_MODE_DISABLED (0)
#define TEST_MODE_ENABLED  (1)

#define LED_ON_OFF_ON          (0)
#define LED_ON_OFF_OFF         (1)
#define LED_ON_OFF_ON_REQUEST  (2)
#define LED_ON_OFF_OFF_REQUEST (3)

#define PROXIMITY_SETUP_NONE   (0)
#define PROXIMITY_SETUP_FRONT  (1)
#define PROXIMITY_SETUP_REAR   (2)
#define PROXIMITY_SETUP_BOTH   (3)

#define EQ_BYPASS_ON          (0)
#define EQ_BYPASS_OFF         (1)
#define EQ_BYPASS_ON_REQUEST  (2)
#define EQ_BYPASS_OFF_REQUEST (3)

/// diable all the debug
//#define ALL_DEBUG_DISABLE
#ifdef ALL_DEBUG_DISABLE
#  undef BT_DEBUG_ENABLE
#  undef POWER_DEBUG
#  undef AUDIOSRV_DEBUG
#  undef MAINAPP_DEBUG_ENABLE
#  undef ASE_TK_DEBUG_ENABLE
#endif

#define TP_MONITOR_ON_OFF_CONTROL
/*
     DEBUG SETTINGS
*/
//###################################################################
#define DEBUG_VOLUME_CONTROL (FALSE)
#define BEBEBE_ON_PROX       (0)
#define PROXIMITY_RAW        (FALSE)
#define ALWAYS_ON            (FALSE)
#define KEY_IGNORE           (FALSE)
#define BP_OPEN_CLOSE_TEST   (FALSE)
#define BP_TEST_STATION      (FALSE)
#define USE_LDC_DATA_IN_FW

#if (FALSE == BP_TEST_STATION)
#define HAS_LED_RECOVERY
#endif

#define DSP_REINIT
#define TOUCH_REINIT

//###################################################################

#define HAS_I2C_ERROR_RECOVERY
#define HAS_I2C_ERROR_SMART_RECOVERY  


/**************************************************/
/************ Firmware Version Control  *****************/
/**************************************************/
/**
* @name Firmware Version Control
* Firmware Version Info
*/
///@{

/// Product Info
#define TP_PRODUCT  "s53"
#define TP_MCU_FAMILY "stm32"
#define TP_MCU "STM32F091RC"

#define STRINGIFY2(x) #x
#define STRINGIFY(x) STRINGIFY2(x)
#define PASTE(a, b) a##.b

/// PIU version, i.e. swv5.05
#define PIU_MAJOR_VERSION   SW_MAJOR_VERSION
#define PIU_MINOR_VERSION1  SW_MINOR_VERSION1
#define PIU_MINOR_VERSION2  SW_MINOR_VERSION2
#define PIU_MINOR_VERSION3  SW_MINOR_VERSION3
#define PIU_VERSION         STRINGIFY(PIU_MAJOR_VERSION.PIU_MINOR_VERSION1.PIU_MINOR_VERSION2.PIU_MINOR_VERSION3)

/// UBL Bootloader version, i.e. swv5.05
#define BL_MAJOR_VERSION   SW_MAJOR_VERSION
#define BL_MINOR_VERSION1  SW_MINOR_VERSION1
#define BL_MINOR_VERSION2  SW_MINOR_VERSION2
#define BL_MINOR_VERSION3  SW_MINOR_VERSION3
#define BOOTLOADER_VERSION      STRINGIFY(BL_MAJOR_VERSION.BL_MINOR_VERSION1.BL_MINOR_VERSION2.BL_MINOR_VERSION3)

/// SW version, i.e. swv5.0.5
#define SW_MAJOR_VERSION   5
#define SW_MINOR_VERSION1  0
#define SW_MINOR_VERSION2  10
#define SW_MINOR_VERSION3  13
#define PRODUCT_VERSION_MCU     STRINGIFY(SW_MAJOR_VERSION.SW_MINOR_VERSION1.SW_MINOR_VERSION2.SW_MINOR_VERSION3)

//#define PRODUCT_VERSION_DSP     ""

#define SOFTWARE_VERSION_STRING TP_PRODUCT PRODUCT_VERSION_MCU

///@}  //endof Firmware Version Control

/**************************************************/
/****************** QP Setting  **********************/
/**************************************************/
/**
* @name QP Setting
* setting data for QP
*/
///@{

/* We have many log printing now, and UART interrupt use many Q_NEW_X() to use all the QP pool.
 * On this stage, just design big pool,  *10 for
 *   - NUM_OF_SMALL_EVENTS
 *   - NUM_OF_MEDIUM_EVENTS
 *   - NUM_OF_LARGE_EVENTS
 * We then need to fine tune pool size and make sure no memory leakage occurs.
 */
#define NUM_OF_SMALL_EVENTS        80
#define SIZE_OF_SMALL_EVENTS       8

#define NUM_OF_MEDIUM_EVENTS       40
#define SIZE_OF_MEDIUM_EVENTS      24

#define NUM_OF_LARGE_EVENTS        10
#define SIZE_OF_LARGE_EVENTS       248 //ASE-NG server need a big event, original setting (38bytes) is too small

/* We have many event, server sometimes crash because out of queue.
 * On this stage, just design big queue,  *5 for
 *   - Audio Server
 *   - ASE-TK Server
 *   - LED Server
 * We then need to fine tune queue size later
 */
#define AUDIO_SRV_EVENT_Q_SIZE     15
#define SETT_SRV_EVENT_Q_SIZE      10
#define LED_SRV_EVENT_Q_SIZE       25
#define DBG_SRV_EVENT_Q_SIZE       30
#define DBG_SRV_TX_BUF_Q_SIZE      5
#define POWER_SRV_EVENT_Q_SIZE     10
#define KEY_SRV_EVENT_Q_SIZE       10
#define BT_SRV_EVENT_Q_SIZE        5
#define ASETK_SRV_EVENT_Q_SIZE	   25
#define MAINAPP_EVENT_Q_SIZE       30


#endif  // PRODUCT_CONFIG

///@}  //endof QP Setting


/// @} //endof product Config group for doxygen

